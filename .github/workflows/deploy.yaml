name: Terraform Infrastructure Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

  # Allow manual execution of apply and destroy
  workflow_dispatch:

defaults:
  run:
    shell: bash
    working-directory: ./terraform

jobs:
  terraform-prepare:
    name: Terraform Init, Format, Validate, Plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: terraform plan -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ./terraform/tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-prepare
    # This job only runs when manually triggered
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: ./terraform/tfplan

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: terraform apply tfplan

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    needs: terraform-prepare
    # This job only runs when manually triggered
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: terraform destroy -auto-approve




# name: Terraform Infrastructure Provisioning

# # Trigger on push or pull requests to the main branch and allow manual execution
# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

#   # Allow manual execution of apply and destroy jobs
#   workflow_dispatch:

# # Define the runner globally, this can be self-hosted or GitHub-hosted runner
# defaults:
#   run:
#     shell: bash
#     working-directory: ./terraform

# jobs:
#   # terraform-format:
#   #   name: Terraform Format
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - name: Checkout Code
#   #       uses: actions/checkout@v3

#   #     - name: Set up Terraform
#   #       uses: hashicorp/setup-terraform@v2

#   #     - name: Terraform Format Check
#   #       run: terraform fmt -check -recursive

#   terraform-init:
#     name: Terraform Init
#     runs-on: ubuntu-latest
#     env:
#       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       AWS_REGION: ${{ secrets.AWS_REGION }}
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2

#       - name: Terraform Init
#         run: terraform init -reconfigure

#   terraform-validate:
#     name: Terraform Validate
#     runs-on: ubuntu-latest
#     needs: terraform-init
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2

#       - name: Terraform Validate
#         run: terraform validate

#   terraform-plan:
#     name: Terraform Plan
#     runs-on: ubuntu-latest
#     needs: terraform-validate
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2

#       - name: Terraform Plan
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#         run: terraform plan -out=tfplan

#       - name: Upload Terraform Plan
#         uses: actions/upload-artifact@v3
#         with:
#           name: tfplan
#           path: ./terraform/tfplan

#   # terraform-apply:
#   #   name: Terraform Apply
#   #   runs-on: ubuntu-latest
#   #   needs: terraform-plan
#   #   # Apply can now be triggered manually or automatically based on event type
#   #   if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/master'
#   #   steps:
#   #     - name: Checkout Code
#   #       uses: actions/checkout@v3

#   #     - name: Download Terraform Plan
#   #       uses: actions/download-artifact@v3
#   #       with:
#   #         name: tfplan
#   #         path: ./terraform/tfplan

#   #     - name: Set up Terraform
#   #       uses: hashicorp/setup-terraform@v2

#   #     - name: Terraform Apply
#   #       env:
#   #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   #         AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#   #       run: terraform apply tfplan

#   # terraform-destroy:
#   #   name: Terraform Destroy
#   #   runs-on: ubuntu-latest
#   #   needs: terraform-init
#   #   if: github.event_name == 'workflow_dispatch'  # Manual trigger
#   #   steps:
#   #     - name: Checkout Code
#   #       uses: actions/checkout@v3

#   #     - name: Set up Terraform
#   #       uses: hashicorp/setup-terraform@v2

#   #     - name: Terraform Init
#   #       run: terraform init

#   #     - name: Terraform Destroy
#   #       env:
#   #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   #         AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#   #       run: terraform destroy -auto-approve




# # name: Terraform Infrastructure Provisioning

# # on:
# #   push:
# #     branches:
# #       - "**"  # Triggers on push
# #   pull_request:  # Runs on PR to check terraform plan
# #     branches:
# #       - master

# # jobs:
# #   terraform:
# #     name: Terraform Actions
# #     runs-on: ubuntu-latest
# #     env:
# #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #       AWS_REGION: ${{ secrets.AWS_REGION }}

# #     steps:
# #       # Step 1: Checkout your repository
# #       - name: Checkout Code
# #         uses: actions/checkout@v3

# #       # Step 2: Setup Terraform CLI
# #       - name: Setup Terraform
# #         uses: hashicorp/setup-terraform@v2
# #         with:
# #           terraform_version: 1.5.0  # Update with your version

# #       # Step 3: Initialize Terraform
# #       - name: Terraform Init
# #         working-directory: terraform  # Specify the directory where your Terraform files are located
# #         # env:
# #         #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #         #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #         #   AWS_REGION: ${{ secrets.AWS_REGION }}
# #         run: terraform init

# #       # Step 4: Terraform Plan (for pull requests or branch commits)
# #       - name: Terraform Plan
# #         working-directory: terraform
# #         # env:
# #         #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #         #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #         #   AWS_REGION: ${{ secrets.AWS_REGION }}
# #         run: terraform plan

# #   terraform-apply:
# #     name: Terraform Apply
# #     runs-on: ubuntu-latest
# #     needs: terraform
# #     env:
# #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #       AWS_REGION: ${{ secrets.AWS_REGION }}
# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v3
      
# #       # Step 2: Setup Terraform CLI
# #       - name: Setup Terraform
# #         uses: hashicorp/setup-terraform@v2
# #         with:
# #           terraform_version: 1.5.0  # Update with your version

# #       # Step 5: Terraform Apply (only runs on push to master branch)
# #       - name: Terraform Apply
# #         if: github.ref == 'refs/heads/master'  # Only apply on master branch
# #         working-directory: terraform
# #         run: terraform apply -auto-approve

# #   terraform-destroy:
# #     name: Terraform Destroy
# #     runs-on: ubuntu-latest
# #     needs: terraform-apply
# #     env:
# #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #       AWS_REGION: ${{ secrets.AWS_REGION }}
# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v3
      
# #       # Step 2: Setup Terraform CLI
# #       - name: Setup Terraform
# #         uses: hashicorp/setup-terraform@v2
# #         with:
# #           terraform_version: 1.5.0 
# #       # Step 5: Terraform Apply (only runs on push to master branch)
# #       - name: Terraform Destroy
# #         if: github.ref == 'refs/heads/master'  # Only apply on master branch
# #         working-directory: terraform
# #         run: terraform destroy -auto-approve



# # # name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"
 
# # # on:
# # #  push:
# # #    branches:
# # #    - main
# # #    paths:
# # #    - terraform/**
# # #  pull_request:
# # #    branches:
# # #    - main
# # #    paths:
# # #    - terraform/**
 
# # # env:
# # #  # verbosity setting for Terraform logs
# # #  TF_LOG: INFO
# # #  # Credentials for deployment to AWS
# # #  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
# # #  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# # #  # S3 bucket for the Terraform state
# # #  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}
 
# # # jobs:
# # #  terraform:
# # #    name: "Terraform Infrastructure Change Management"
# # #    runs-on: ubuntu-latest
# # #    defaults:
# # #      run:
# # #        shell: bash
# # #        # We keep Terraform files in the terraform directory.
# # #        working-directory: ./terraform
 
# # #    steps:
# # #      - name: Checkout the repository to the runner
# # #        uses: actions/checkout@v2
 
# # #      - name: Setup Terraform with specified version on the runner
# # #        uses: hashicorp/setup-terraform@v2
# # #        with:
# # #          terraform_version: 1.3.0
    
# # #      - name: Terraform init
# # #        id: init
# # #        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
 
# # #      - name: Terraform format
# # #        id: fmt
# # #        run: terraform fmt -check
    
# # #      - name: Terraform validate
# # #        id: validate
# # #        run: terraform validate
 
# # #      - name: Terraform plan
# # #        id: plan
# # #        if: github.event_name == 'pull_request'
# # #        run: terraform plan -no-color -input=false
# # #        continue-on-error: true
    
# # #      - uses: actions/github-script@v6
# # #        if: github.event_name == 'pull_request'
# # #        env:
# # #          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
# # #        with:
# # #          script: |
# # #            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
# # #            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
# # #            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
# # #            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
 
# # #            <details><summary>Show Plan</summary>
 
# # #            \`\`\`\n
# # #            ${process.env.PLAN}
# # #            \`\`\`
 
# # #            </details>
# # #            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
 
# # #            github.rest.issues.createComment({
# # #              issue_number: context.issue.number,
# # #              owner: context.repo.owner,
# # #              repo: context.repo.repo,
# # #              body: output
# # #            })
 
# # #      - name: Terraform Plan Status
# # #        if: steps.plan.outcome == 'failure'
# # #        run: exit 1
 
# # #      - name: Terraform Apply
# # #        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
# # #        run: terraform apply -auto-approve -input=false


# # # # name: Deploy Infrastructure and Application

# # # # on:
# # # #   push:
# # # #     branches:
# # # #       - master  # Workflow will be triggered only on changes to the main branch

# # # # jobs:
# # # #   terraform:
# # # #     name: Provision AWS Infrastructure
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Checkout repository
# # # #         uses: actions/checkout@v3

# # # #       - name: Set up Terraform
# # # #         uses: hashicorp/setup-terraform@v2
# # # #         with:
# # # #           terraform_version: 1.5.0  # specify your Terraform version

# # # #       - name: Change directory to Terraform folder
# # # #         working-directory: ./terraform
# # # #         run: terraform init

# # # #       - name: Terraform Apply
# # # #         working-directory: ./terraform
# # # #         env:
# # # #           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
# # # #           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# # # #           AWS_REGION: ${{ secrets.AWS_REGION }}
# # # #         run: terraform apply -auto-approve

# # # #   helm:
# # # #     name: Deploy Application using Helm
# # # #     runs-on: ubuntu-latest
# # # #     needs: terraform
# # # #     steps:
# # # #       - name: Checkout repository
# # # #         uses: actions/checkout@v3

# # # #       - name: Set up Helm
# # # #         uses: azure/setup-helm@v1

# # # #       - name: Configure AWS CLI
# # # #         run: |
# # # #           aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
# # # #           aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# # # #           aws configure set region ${{ secrets.AWS_REGION }}

# # # #       - name: Get EKS Cluster Credentials
# # # #         run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name your-eks-cluster-name

# # # #       - name: Install Helm Chart
# # # #         working-directory: ./helm/my-app-chart
# # # #         run: helm upgrade --install my-app . --namespace default --create-namespace
